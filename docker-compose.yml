# container key order
# 0. init
# 1. image
# 2. container_name
# 3. command
# 4. build
# 5. ports
# 6. volumes
# 7. network
# 8. depends_on
# 9. healthcheck
# 10. env_file

services:
  nginx:
    init: true
    image: nginx
    container_name: $NGINX_HOST
    build:
      context: ./backend/nginx
      dockerfile: Dockerfile
    depends_on:
      django:
        condition: service_healthy
    healthcheck:
      test: curl --fail -k https://$NGINX_HOST:$NGINX_PORT/metrics
      interval: 3s
      timeout: 2s
      retries: 30
    ports:
      - "$NGINX_PORT:$NGINX_PORT"
    volumes:
      - ./backend/nginx/logs:/var/log/nginx
      - ./frontend/src:/var/www/html
    networks:
      - net
    env_file:
      - .env

  django:
    init: true
    image: django
    container_name: $DJANGO_HOST
    build:
      context: ./backend/django
      dockerfile: Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://$DJANGO_HOST:$DJANGO_PORT/health/ && curl --fail http://$DJANGO_HOST:$WS_PORT/health/
      interval: 3s
      timeout: 2s
      retries: 30
    volumes:
      - ./backend/django/src:/django
    networks:
      - net
    env_file:
      - .env

  redis-cache:
    init: true
    image: redis-cache
    container_name: $REDIS_CACHE_HOST
    build:
      context: ./backend/redis-cache
      dockerfile: Dockerfile
    networks:
      - net
    healthcheck:
      test: redis-cli -h redis-cache ping
      interval: 3s
      timeout: 2s
      retries: 30
    env_file:
      - .env

  postgresql:
    init: true
    image: postgresql
    container_name: $POSTGRES_HOST
    command:
      - "postgres"
      - "-c"
      - "config_file=/var/lib/postgresql/postgresql.conf"
    build:
      context: ./backend/PostgreSQL
      dockerfile: Dockerfile
    networks:
      - net
    healthcheck:
      test: pg_isready --dbname=$POSTGRES_DB --host=$POSTGRES_HOST --port=$POSTGRES_PORT --username=$POSTGRES_USER
      interval: 10s
      timeout: 2s
      retries: 50
    volumes:
      - ./backend/PostgreSQL/data:/var/lib/postgresql/data
      - ./backend/PostgreSQL/postgresql.conf:/var/lib/postgresql/postgresql.conf
      - ./backend/PostgreSQL/logs:/var/log/postgresql
    env_file:
      - .env

  grafana:
    init: true
    image: grafana/grafana
    container_name: $GRAFANA_HOST
    build: 
      context: ./backend/grafana 
      dockerfile: Dockerfile
    ports:
      - "$GRAFANA_PORT:$GRAFANA_PORT"
    volumes:
      - ./backend/grafana/data:/var/lib/grafana
    networks:
      - net
    depends_on:
      prometheus:
        condition: service_healthy
    env_file:
      - .env

  prometheus:
    init: true
    image: prom/prometheus
    container_name: $PROMETHEUS_HOST
    build:
      context: ./backend/prometheus
      dockerfile: Dockerfile
    ports:
      - "$PROMETHEUS_PORT:$PROMETHEUS_PORT"
    volumes:
      - ./backend/prometheus/data:/prometheus
    networks:
      - net
    healthcheck:
      test: curl -k --fail https://$PROMETHEUS_HOST:$PROMETHEUS_PORT/-/healthy
      interval: 3s
      timeout: 2s
      retries: 30
    env_file:
      - .env

  node-exporter:
    init: true
    image: prom/node-exporter
    container_name: $NODE_EXPORTER_HOST
    command:
     - '--collector.disable-defaults'
     - '--collector.cpu'
     - '--collector.loadavg'
    ports:
     - "$NODE_EXPORTER_PORT:$NODE_EXPORTER_PORT"
    networks:
      - net
    env_file:
      - .env

  nginx-prometheus-exporter:
    init: true
    image: nginx/nginx-prometheus-exporter
    container_name: $NGINX_EXPORTER_HOST
    command:
     - '--nginx.scrape-uri=https://$NGINX_HOST:$NGINX_PORT/metrics'
    networks:
      - net
    env_file:
      - .env

  postgres-exporter:
    init: true
    image: prometheuscommunity/postgres-exporter
    container_name: $POSTGRES_EXPORTER_HOST
    networks:
      - net
    env_file:
      - .env

  elasticsearch:
    init: true
    image: elasticsearch
    container_name: $ELASTICSEARCH_HOST
    build:
      context: ./backend/ELK/elasticsearch
      dockerfile: Dockerfile
    ports:
      - '$ELASTICSEARCH_PORT:$ELASTICSEARCH_PORT'
    # volumes:
    #   - ./backend/ELK/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

    # environment:
      # ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # discovery.type: single-node
    networks:
      - net
    depends_on:
      nginx:
        condition: service_healthy
    healthcheck:
      test: curl --fail -k http://$ELASTICSEARCH_HOST:$ELASTICSEARCH_PORT/_cat/health
      interval: 3s
      timeout: 2s
      retries: 30
    env_file:
      - .env

  logstash: 
    init: true
    image: logstash
    container_name: $LOGSTASH_HOST
    build:
      context: ./backend/ELK/logstash
      dockerfile: Dockerfile
    volumes:
      - ./backend/django/src/logs/log.log:/usr/share/logstash/logs/django.log
      - ./backend/nginx/logs/access.log:/usr/share/logstash/logs/nginx.log
      - ./backend/PostgreSQL/logs/postgresql.log:/usr/share/logstash/logs/postgresql.log
    # ports:
    # environment:
      # LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - net
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://$LOGSTASH_HOST:$LOGSTASH_PORT
      interval: 3s
      timeout: 2s
      retries: 30
    env_file:
      - .env

  kibana:
    init: true
    image: kibana
    container_name: $KIBANA_HOST
    build:
      context: ./backend/ELK/kibana
      dockerfile: Dockerfile
    ports:
      - '$KIBANA_PORT:$KIBANA_PORT'
    # environment:
    #   - ELASTICSEARCH_URL=http://elasticsearch:9200
    # volumes:
    networks:
      - net
    depends_on:
      logstash:
        condition: service_healthy
    env_file:
      - .env

networks:
  net:
    name: transcendence_network
    driver: bridge
